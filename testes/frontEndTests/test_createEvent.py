# Generated by Selenium IDE
from testCreate import TestCreate
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC

class TestCreateEvent(TestCreate):
  def setup_method(self,endereco_inicial,nome,tipo,avaliacao,descricao):
    self.config()
    self.endereco_inicial = endereco_inicial
    self.nome = nome
    self.tipo = tipo
    self.avaliacao = avaliacao
    self.descricao = descricao
  
  def execute_test(self):
    try:
      self.driver.get(self.endereco_inicial)
      self.driver.set_window_size(1280, 937)
      self.driver.find_element(By.CSS_SELECTOR, "button:nth-child(2)").click()
      self.driver.find_element(By.ID, "name").click()
      self.driver.find_element(By.ID, "name").send_keys(self.nome)
      dropdown = self.driver.find_element(By.ID, "tipo")
      dropdown.find_element(By.XPATH, f"//option[. = '{self.tipo}']").click()
      element = self.driver.find_element(By.ID, "tipo")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.ID, "tipo")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.ID, "tipo")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      dropdown = self.driver.find_element(By.ID, "status")
      dropdown.find_element(By.XPATH, "//option[. = 'aberto']").click()
      element = self.driver.find_element(By.ID, "status")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.ID, "status")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.ID, "status")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      element = self.driver.find_element(By.ID, "avaliacao")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()
      element = self.driver.find_element(By.ID, "avaliacao")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      element = self.driver.find_element(By.ID, "avaliacao")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()
      self.driver.find_element(By.ID, "avaliacao").send_keys(str(self.avaliacao))
      self.driver.find_element(By.ID, "avaliacao").click()
      self.driver.find_element(By.ID, "descricao").click()
      self.driver.find_element(By.ID, "descricao").send_keys(self.descricao)
      self.driver.find_element(By.CSS_SELECTOR, "html").click()
      self.driver.find_element(By.CSS_SELECTOR, "button").click()
      WebDriverWait(self.driver, 3).until(EC.alert_is_present())
      self.driver.switch_to.alert.accept()
      self.driver.find_element(By.CSS_SELECTOR, "h1").click()
      return True
    except:
      return False
